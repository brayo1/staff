/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package staff.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import staff.service.model.Staff;
import staff.service.model.StaffModel;
import staff.service.model.StaffSoap;

/**
 * The base model implementation for the Staff service. Represents a row in the &quot;staf_Staff&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StaffModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StaffImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StaffImpl
 * @generated
 */
@JSON(strict = true)
public class StaffModelImpl extends BaseModelImpl<Staff> implements StaffModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a staff model instance should use the <code>Staff</code> interface instead.
	 */
	public static final String TABLE_NAME = "staf_Staff";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"staffId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"staffName", Types.VARCHAR}, {"staffDept", Types.VARCHAR},
		{"staffOrg", Types.VARCHAR}, {"staffAge", Types.VARCHAR},
		{"staffEmployer", Types.VARCHAR}, {"staffDateEmployed", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("staffId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("staffName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("staffDept", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("staffOrg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("staffAge", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("staffEmployer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("staffDateEmployed", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table staf_Staff (uuid_ VARCHAR(75) null,staffId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,staffName VARCHAR(75) null,staffDept VARCHAR(75) null,staffOrg VARCHAR(75) null,staffAge VARCHAR(75) null,staffEmployer VARCHAR(75) null,staffDateEmployed VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table staf_Staff";

	public static final String ORDER_BY_JPQL = " ORDER BY staff.staffId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY staf_Staff.staffId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		staff.service.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.staff.service.model.Staff"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		staff.service.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.staff.service.model.Staff"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		staff.service.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.staff.service.model.Staff"),
		true);

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long STAFFID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Staff toModel(StaffSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Staff model = new StaffImpl();

		model.setUuid(soapModel.getUuid());
		model.setStaffId(soapModel.getStaffId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStaffName(soapModel.getStaffName());
		model.setStaffDept(soapModel.getStaffDept());
		model.setStaffOrg(soapModel.getStaffOrg());
		model.setStaffAge(soapModel.getStaffAge());
		model.setStaffEmployer(soapModel.getStaffEmployer());
		model.setStaffDateEmployed(soapModel.getStaffDateEmployed());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Staff> toModels(StaffSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Staff> models = new ArrayList<Staff>(soapModels.length);

		for (StaffSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		staff.service.service.util.ServiceProps.get(
			"lock.expiration.time.staff.service.model.Staff"));

	public StaffModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _staffId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStaffId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _staffId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Staff.class;
	}

	@Override
	public String getModelClassName() {
		return Staff.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Staff, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Staff, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Staff, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Staff)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Staff, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Staff, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Staff)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Staff, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Staff, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Staff>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Staff.class.getClassLoader(), Staff.class, ModelWrapper.class);

		try {
			Constructor<Staff> constructor =
				(Constructor<Staff>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Staff, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Staff, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Staff, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Staff, Object>>();
		Map<String, BiConsumer<Staff, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Staff, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object uuidObject) {
					staff.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"staffId",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getStaffId();
				}

			});
		attributeSetterBiConsumers.put(
			"staffId",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object staffIdObject) {
					staff.setStaffId((Long)staffIdObject);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object groupIdObject) {
					staff.setGroupId((Long)groupIdObject);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object companyIdObject) {
					staff.setCompanyId((Long)companyIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object userIdObject) {
					staff.setUserId((Long)userIdObject);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object userNameObject) {
					staff.setUserName((String)userNameObject);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object createDateObject) {
					staff.setCreateDate((Date)createDateObject);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object modifiedDateObject) {
					staff.setModifiedDate((Date)modifiedDateObject);
				}

			});
		attributeGetterFunctions.put(
			"staffName",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getStaffName();
				}

			});
		attributeSetterBiConsumers.put(
			"staffName",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object staffNameObject) {
					staff.setStaffName((String)staffNameObject);
				}

			});
		attributeGetterFunctions.put(
			"staffDept",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getStaffDept();
				}

			});
		attributeSetterBiConsumers.put(
			"staffDept",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object staffDeptObject) {
					staff.setStaffDept((String)staffDeptObject);
				}

			});
		attributeGetterFunctions.put(
			"staffOrg",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getStaffOrg();
				}

			});
		attributeSetterBiConsumers.put(
			"staffOrg",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object staffOrgObject) {
					staff.setStaffOrg((String)staffOrgObject);
				}

			});
		attributeGetterFunctions.put(
			"staffAge",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getStaffAge();
				}

			});
		attributeSetterBiConsumers.put(
			"staffAge",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object staffAgeObject) {
					staff.setStaffAge((String)staffAgeObject);
				}

			});
		attributeGetterFunctions.put(
			"staffEmployer",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getStaffEmployer();
				}

			});
		attributeSetterBiConsumers.put(
			"staffEmployer",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(Staff staff, Object staffEmployerObject) {
					staff.setStaffEmployer((String)staffEmployerObject);
				}

			});
		attributeGetterFunctions.put(
			"staffDateEmployed",
			new Function<Staff, Object>() {

				@Override
				public Object apply(Staff staff) {
					return staff.getStaffDateEmployed();
				}

			});
		attributeSetterBiConsumers.put(
			"staffDateEmployed",
			new BiConsumer<Staff, Object>() {

				@Override
				public void accept(
					Staff staff, Object staffDateEmployedObject) {

					staff.setStaffDateEmployed((String)staffDateEmployedObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getStaffId() {
		return _staffId;
	}

	@Override
	public void setStaffId(long staffId) {
		_staffId = staffId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getStaffName() {
		if (_staffName == null) {
			return "";
		}
		else {
			return _staffName;
		}
	}

	@Override
	public void setStaffName(String staffName) {
		_staffName = staffName;
	}

	@JSON
	@Override
	public String getStaffDept() {
		if (_staffDept == null) {
			return "";
		}
		else {
			return _staffDept;
		}
	}

	@Override
	public void setStaffDept(String staffDept) {
		_staffDept = staffDept;
	}

	@JSON
	@Override
	public String getStaffOrg() {
		if (_staffOrg == null) {
			return "";
		}
		else {
			return _staffOrg;
		}
	}

	@Override
	public void setStaffOrg(String staffOrg) {
		_staffOrg = staffOrg;
	}

	@JSON
	@Override
	public String getStaffAge() {
		if (_staffAge == null) {
			return "";
		}
		else {
			return _staffAge;
		}
	}

	@Override
	public void setStaffAge(String staffAge) {
		_staffAge = staffAge;
	}

	@JSON
	@Override
	public String getStaffEmployer() {
		if (_staffEmployer == null) {
			return "";
		}
		else {
			return _staffEmployer;
		}
	}

	@Override
	public void setStaffEmployer(String staffEmployer) {
		_staffEmployer = staffEmployer;
	}

	@JSON
	@Override
	public String getStaffDateEmployed() {
		if (_staffDateEmployed == null) {
			return "";
		}
		else {
			return _staffDateEmployed;
		}
	}

	@Override
	public void setStaffDateEmployed(String staffDateEmployed) {
		_staffDateEmployed = staffDateEmployed;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Staff.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Staff.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Staff toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Staff>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StaffImpl staffImpl = new StaffImpl();

		staffImpl.setUuid(getUuid());
		staffImpl.setStaffId(getStaffId());
		staffImpl.setGroupId(getGroupId());
		staffImpl.setCompanyId(getCompanyId());
		staffImpl.setUserId(getUserId());
		staffImpl.setUserName(getUserName());
		staffImpl.setCreateDate(getCreateDate());
		staffImpl.setModifiedDate(getModifiedDate());
		staffImpl.setStaffName(getStaffName());
		staffImpl.setStaffDept(getStaffDept());
		staffImpl.setStaffOrg(getStaffOrg());
		staffImpl.setStaffAge(getStaffAge());
		staffImpl.setStaffEmployer(getStaffEmployer());
		staffImpl.setStaffDateEmployed(getStaffDateEmployed());

		staffImpl.resetOriginalValues();

		return staffImpl;
	}

	@Override
	public int compareTo(Staff staff) {
		long primaryKey = staff.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Staff)) {
			return false;
		}

		Staff staff = (Staff)obj;

		long primaryKey = staff.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		StaffModelImpl staffModelImpl = this;

		staffModelImpl._originalUuid = staffModelImpl._uuid;

		staffModelImpl._originalGroupId = staffModelImpl._groupId;

		staffModelImpl._setOriginalGroupId = false;

		staffModelImpl._originalCompanyId = staffModelImpl._companyId;

		staffModelImpl._setOriginalCompanyId = false;

		staffModelImpl._setModifiedDate = false;

		staffModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Staff> toCacheModel() {
		StaffCacheModel staffCacheModel = new StaffCacheModel();

		staffCacheModel.uuid = getUuid();

		String uuid = staffCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			staffCacheModel.uuid = null;
		}

		staffCacheModel.staffId = getStaffId();

		staffCacheModel.groupId = getGroupId();

		staffCacheModel.companyId = getCompanyId();

		staffCacheModel.userId = getUserId();

		staffCacheModel.userName = getUserName();

		String userName = staffCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			staffCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			staffCacheModel.createDate = createDate.getTime();
		}
		else {
			staffCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			staffCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			staffCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		staffCacheModel.staffName = getStaffName();

		String staffName = staffCacheModel.staffName;

		if ((staffName != null) && (staffName.length() == 0)) {
			staffCacheModel.staffName = null;
		}

		staffCacheModel.staffDept = getStaffDept();

		String staffDept = staffCacheModel.staffDept;

		if ((staffDept != null) && (staffDept.length() == 0)) {
			staffCacheModel.staffDept = null;
		}

		staffCacheModel.staffOrg = getStaffOrg();

		String staffOrg = staffCacheModel.staffOrg;

		if ((staffOrg != null) && (staffOrg.length() == 0)) {
			staffCacheModel.staffOrg = null;
		}

		staffCacheModel.staffAge = getStaffAge();

		String staffAge = staffCacheModel.staffAge;

		if ((staffAge != null) && (staffAge.length() == 0)) {
			staffCacheModel.staffAge = null;
		}

		staffCacheModel.staffEmployer = getStaffEmployer();

		String staffEmployer = staffCacheModel.staffEmployer;

		if ((staffEmployer != null) && (staffEmployer.length() == 0)) {
			staffCacheModel.staffEmployer = null;
		}

		staffCacheModel.staffDateEmployed = getStaffDateEmployed();

		String staffDateEmployed = staffCacheModel.staffDateEmployed;

		if ((staffDateEmployed != null) && (staffDateEmployed.length() == 0)) {
			staffCacheModel.staffDateEmployed = null;
		}

		return staffCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Staff, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Staff, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Staff, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Staff)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Staff, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Staff, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Staff, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Staff)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Staff>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _staffId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _staffName;
	private String _staffDept;
	private String _staffOrg;
	private String _staffAge;
	private String _staffEmployer;
	private String _staffDateEmployed;
	private long _columnBitmask;
	private Staff _escapedModel;

}